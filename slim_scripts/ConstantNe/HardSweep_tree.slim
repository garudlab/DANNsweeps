initialize() {
	initializeTreeSeq();
	if (exists("slimgui")) {
		defineConstant("R", 5e-9); //1e-7
		defineConstant("MU", 1e-9); //1e-7
		defineConstant("N", 1e6); //5e-4
		defineConstant("Q", 100); //rescaling constant
		defineConstant("sd", 0);
		defineConstant("sb", 0.03);
		defineConstant("run", 1);
		//defineConstant("ChrType",'X');
		defineConstant("THETA_A", 0.01);
		defineConstant("PF", 0.5);
		defineConstant("AgeSweep", 0.0);
		defineConstant("burn_in", 0.5);
		defineConstant("sexRatio", 0.5);
		defineConstant("H", 0.5);
		defineConstant("file_path","tmp/out_X.txt");
	
	
	}
	defineConstant("file_path","tmp_intermediate_files/ConstantNe_HS_"+asString(run)+".trees");
	defineConstant("simID", getSeed());
	defineConstant("H", 0.5);
	defineConstant("chromosome_length", asInteger(4.5e5)); //1e5
	defineConstant("k",1);
	
	//initializeMutationType("m1", 0.5, "f", 0);
	initializeMutationType("m2", H, "f", sb);
	m2.mutationStackPolicy = "f";// ??
	
	
	initializeGenomicElementType("g2", m2,1);
	initializeGenomicElement(g2, 0, chromosome_length-1);
	
	initializeMutationRate(0);
	
	initializeRecombinationRate(R*Q);

}
function (void)selecOn(void){
	print("selection on");
	// save the state of the simulation
	sim.treeSeqOutput("/tmp/slim_" + simID + ".trees");
	target = sample(p1.individuals.genome1, 1);
	target.addNewDrawnMutation(m2, asInteger(chromosome_length/2)-1);
	sim.tag =1; //seleciton is on
}

function (void)checkSweep(void) {
	counts = p1.genomes.individual.countOfMutationsOfType(m2);
	freq = mean(counts > 0);
	subs=sum(sim.substitutions.mutationType == m2);
	if (freq >= PF)
	{
		
		p_sample=p1.sampleIndividuals(100);
		muts=p_sample.genomes.mutationsOfType(m2);
		muts = unique(muts).size();
		line = asString(muts) +  "\t" + asString(sim.cycle)+"\t" + "\t"+asString(freq)
			+  "\t" +asString(THETA_A);
		
		catn(line);
		
		if (muts ==1 | subs==1)
		{
			print("REACHED PF AND AGE -- outputting tree");
			sim.treeSeqOutput(file_path);
			sim.simulationFinished();
		}
		else if (muts>1)
           	{
            		print("SOFT SWEEP - RESTARTING");
            		sim.readFromPopulationFile("/tmp/slim_" + simID + ".trees");
            		// start a newly seeded run
            		setSeed(rdunif(1, 0, asInteger(2^62) - 1));
            		target = sample(p1.individuals.genome1, 1);
            		target.addNewDrawnMutation(m2, asInteger(chromosome_length/2)-1);
            		sim.tag =1; //seleciton is on
            	}
	
	}
	else if ( freq ==0  & sim.tag>=1)
	{
		//restart
		print("LOST SWEEP - RESTARTING");
		sim.readFromPopulationFile("/tmp/slim_" + simID + ".trees");
		// start a newly seeded run
		setSeed(rdunif(1, 0, asInteger(2^62) - 1));
		target = sample(p1.individuals.genome1, 1);
		target.addNewDrawnMutation(m2, asInteger(chromosome_length/2)-1);
		sim.tag =1; //seleciton is on
	
	}

}


1 early() {
	
	sim.addSubpop("p1", asInteger(N/Q));
	
	sim.tag=0;
	
	catn("s= "+asString(sb));
	
	defineConstant("G_start", 100);
	print(G_start);
	
	G_end = 2*asInteger(N/Q)*100;
	print(G_end);
	
	community.registerLateEvent(NULL, "{selecOn();}", G_start, G_start);
	community.registerLateEvent(NULL, "{checkSweep();}", G_start+2, G_end);
	community.registerLateEvent(NULL, "{sim.simulationFinished();}", G_end, G_end);

}

